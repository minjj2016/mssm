<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool.xsd">

       <!-- 本配置文件是工名为springmvc的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->

       <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required
         @Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
       <context:annotation-config />


       <!--  dispatcher上下文 使用annotation自动注册,只扫描controller 忽略其他型的bean, 如@Service -->
       <context:component-scan base-package="**.controller">
              <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
       </context:component-scan>

       <!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。 DefaultAnnotationHandlerMapping
		annotation-driven HandlerMapping -->

       <!-- 扩充了注解驱动，可以将请求参数绑定到控制器参数 -->
       <!-- 1:开启SpringMVC注解模式
       简化配置：
        (1)自动注册DefautlAnnotationHandlerMapping，AnationMethodHandlerAdapter
        (2)提供一系列:数据绑定，json,数字和日期支持，format，@NumberFormat,@DateTimeFormat
        -->
       <mvc:annotation-driven />

       <!--2.静态资源配置，默认Servlet配置-->
       <!--
           1.加入静态资源处理：js,img,css
           2.允许使用“/”整体映射
       -->
       <mvc:default-servlet-handler/>
       <!--配置静态资源的访问-->
       <mvc:annotation-driven />
       <mvc:resources mapping="/images/**" location="/imgs/" />
       <mvc:resources mapping="/js/**" location="/js/" />
       <mvc:resources mapping="/css/**" location="/css/" />
       <mvc:resources mapping="/libs/**" location="/libs/" />
       <mvc:resources mapping="/static/**" location="/static/" />


       <!-- 静态资源处理， css， js， imgs -->
       <!--<mvc:resources mapping="/js/**" location="/js/" />-->
       <!--<mvc:resources mapping="/css/**" location="/css/" />-->
       <!--<mvc:resources mapping="/imgs/**" location="/imgs/" />-->


       <!-- 对模型视图名称的解析,在请求模型名称视图名称是添加前后缀 -->
       <!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
       <bean
               class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
              <property name="order" value="1" />
              <property name="mediaTypes">
                     <map>
                            <entry key="json" value="application/json;charset=utf-8" />
                            <entry key="xml" value="application/xml" />
                            <entry key="htm" value="text/html" />
                     </map>
              </property>
              <!--  配置springmvc 对json的支持  -->
              <property name="defaultViews">
                     <list>
                            <!-- JSON View -->
                            <bean
                                    class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                            </bean>
                     </list>
              </property>
              <property name="ignoreAcceptHeader" value="true" />
       </bean>

       <bean
               class="org.springframework.web.servlet.view.InternalResourceViewResolver">
              <property name="viewClass"
                        value="org.springframework.web.servlet.view.JstlView" />
              <property name="prefix" value="/WEB-INF/classes/view/" />
              <property name="suffix" value=".jsp" />
       </bean>

       <!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
       <bean id="multipartResolver"
             class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
              <property name="maxUploadSize" value="209715200" />
              <property name="defaultEncoding" value="UTF-8" />
              <property name="resolveLazily" value="true" />
       </bean>






</beans>